package views.Panels.calendar;

import io.socket.client.Socket;
import io.socket.emitter.Emitter;
import models.Event;
import views.ModifierEvenement;
import java.awt.Color;
import java.awt.Component;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import models.Project;

public class CalendarJPanel extends javax.swing.JPanel {

    GregorianCalendar cal = new GregorianCalendar();
    ArrayList<Event> ve = new ArrayList<Event>();
    CalendarTableModel tm;
    Project project;

    Socket socket;

    public CalendarJPanel(Project project, Socket socket) {
        this.socket = socket;
        initComponents();
        this.project = project;
        initComponents2();
        
        CalendarJPanel self = this;
        
        try {
            socket.on("calendar-change-broadcast", new Emitter.Listener() {

                @Override
                public void call(Object... args) {
                    System.out.println("Calendar chenge socket event-broadcast");
                    project.update();
                    self.updateCalendar();
                }

            });

        } catch (Exception e) {
            System.out.println("error in Main");
            System.out.println(e);
        }
    }

    public void initComponents2() {
        setVisible(true);
        updateCalendar();
    }

    // Bug: donsnt remove no existent events
    public void updateCalendar() {
        ve = project.getCalendar();

        tm = new CalendarTableModel(cal);
        tblCalendar.setModel(tm);

        for (int i = 0; i < tm.getRowCount(); i++) {
            tblCalendar.setRowHeight(36);
        }

        int d, m = cal.get(Calendar.MONTH), a = cal.get(Calendar.YEAR);

        CellCustomRenderer Rn = new CellCustomRenderer(cal, ve);
        for (int i = 0; i < tm.getColumnCount(); i++) {
            tblCalendar.getColumnModel().getColumn(i).setCellRenderer(Rn);
        }

        lblMois.setText(tm.getLabel());
    }

    private class CellCustomRenderer extends DefaultTableCellRenderer {

        private int i = 0;
        ArrayList<Event> vs;

        public CellCustomRenderer(Calendar cal, ArrayList<Event> ve) {
            setHorizontalAlignment(JLabel.CENTER);
            vs = ve;
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int col) {
            JLabel l = (JLabel) super.getTableCellRendererComponent(table, value,
                    isSelected, hasFocus, row, col);

            int d, m = cal.get(Calendar.MONTH) + 1, a = cal.get(Calendar.YEAR);
            d = (l.getText() == "") ? -1 : Integer.parseInt(l.getText());

            for (Event v : vs) {
                if (v.getAnnee() == a && v.getMois() == m && v.getJour() == d) {
                    if (v.getDescription().equals("Deadline")) {
                        l.setBackground(new Color(180, 20, 20));
                        l.setForeground(new Color(255, 255, 255));
                    } else if (v.getDescription().equals("Activit√©")) {
                        l.setBackground(new Color(130, 160, 50));
                        l.setForeground(new Color(255, 255, 255));
                    } else {
                        l.setBackground(new Color(56, 141, 176));
                        l.setForeground(new Color(255, 255, 255));
                    }
                    break;
                } else {
                    l.setBackground(Color.WHITE);
                    l.setForeground(Color.BLACK);
                }
            }

            return l;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainCalendarPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnSuivant = new javax.swing.JButton();
        lblMois = new javax.swing.JLabel();
        btnPrecedent = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCalendar = new javax.swing.JTable();

        MainCalendarPanel.setBackground(new java.awt.Color(106, 206, 201));

        jPanel2.setBackground(new java.awt.Color(41, 157, 152));

        btnSuivant.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/arrow_right.png"))); // NOI18N
        btnSuivant.setBorderPainted(false);
        btnSuivant.setContentAreaFilled(false);
        btnSuivant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuivantActionPerformed(evt);
            }
        });

        lblMois.setFont(new java.awt.Font("Tahoma", 0, 30)); // NOI18N
        lblMois.setForeground(new java.awt.Color(255, 255, 255));
        lblMois.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMois.setText("Janvier 2016");

        btnPrecedent.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/arrow_left.png"))); // NOI18N
        btnPrecedent.setBorderPainted(false);
        btnPrecedent.setContentAreaFilled(false);
        btnPrecedent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrecedentActionPerformed(evt);
            }
        });

        tblCalendar.setFont(new java.awt.Font("Lao UI", 0, 24)); // NOI18N
        tblCalendar.setForeground(new java.awt.Color(0, 102, 102));
        tblCalendar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "1", "2", "3", "4", "5", "6"},
                {"7", "8", "9", "10", "11", "12", "12"},
                {"13", "14", "15", "16", "17", "18", "19"},
                {"20", "21", "22", "23", "24", "25", "26"},
                {"27", "28", "29", "30", "31", null, null}
            },
            new String [] {
                "Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCalendar.setCellSelectionEnabled(true);
        tblCalendar.setGridColor(new java.awt.Color(138, 228, 228));
        tblCalendar.setIntercellSpacing(new java.awt.Dimension(5, 5));
        tblCalendar.setPreferredSize(new java.awt.Dimension(525, 180));
        tblCalendar.getTableHeader().setResizingAllowed(false);
        tblCalendar.getTableHeader().setReorderingAllowed(false);
        tblCalendar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCalendarMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCalendar);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPrecedent, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblMois, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSuivant, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPrecedent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSuivant)
                            .addComponent(lblMois))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout MainCalendarPanelLayout = new javax.swing.GroupLayout(MainCalendarPanel);
        MainCalendarPanel.setLayout(MainCalendarPanelLayout);
        MainCalendarPanelLayout.setHorizontalGroup(
            MainCalendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainCalendarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        MainCalendarPanelLayout.setVerticalGroup(
            MainCalendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainCalendarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainCalendarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSuivantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuivantActionPerformed
        cal.add(Calendar.MONTH, 1);
        updateCalendar();
    }//GEN-LAST:event_btnSuivantActionPerformed

    private void btnPrecedentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrecedentActionPerformed
        cal.add(Calendar.MONTH, -1);
        updateCalendar();
    }//GEN-LAST:event_btnPrecedentActionPerformed

    private void tblCalendarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCalendarMouseClicked
        int rowIndex = tblCalendar.getSelectedRow();
        int colIndex = tblCalendar.getSelectedColumn();

        String val = tm.getValueAt(rowIndex, colIndex).toString();
        int d = (val.equals("")) ? -1 : Integer.parseInt(val);
        int m = cal.get(Calendar.MONTH) + 1, a = cal.get(Calendar.YEAR);
        for (Event v : ve) {
            if (v.getAnnee() == a && v.getMois() == m && v.getJour() == d) {
                ModifierEvenement mde = new ModifierEvenement(v, project, socket);
                mde.setParent(this);
                mde.setVisible(true);
            }
        }
    }//GEN-LAST:event_tblCalendarMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainCalendarPanel;
    private javax.swing.JButton btnPrecedent;
    private javax.swing.JButton btnSuivant;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMois;
    private javax.swing.JTable tblCalendar;
    // End of variables declaration//GEN-END:variables
}
